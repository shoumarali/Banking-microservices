services:

  rabbitmq:
    image: "rabbitmq:management"
    container_name: rabbitmq
    hostname: "rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: "rabbitmq-diagnostics check_port_connectivity"
      interval: 10s
      timeout: 5s
      retries: 19
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloak:
    image: "quay.io/keycloak/keycloak:26.3.2"
    container_name: "keycloak"
    command: ["start-dev"]
    ports:
      - "7080:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: "admin"
      KC_BOOTSTRAP_ADMIN_PASSWORD: "admin"
    networks:
      - banking


  redis:
    image: "redis"
    container_name: "redis"
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 19
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-deploy-service

  account-db:
    container_name: "account-db"
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: "accountsdb"
    extends:
      file: common-config.yml
      service: microservice-db-config

  loan-db:
    container_name: "loan-db"
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: "loansdb"
    extends:
      file: common-config.yml
      service: microservice-db-config

  card-db:
    container_name: "card-db"
    ports:
      - "3308:3306"
    environment:
      MYSQL_DATABASE: "cardsdb"
    extends:
      file: common-config.yml
      service: microservice-db-config

  config-server:
    image: "alishoumar/config-server:1.0.0"
    container_name: "config-server"
    ports:
      - "8071:8071"
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost:8071/actuator/health/readiness | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      OTEL_SERVICE_NAME: "config-server"

  eureka-server:
    image: "alishoumar/eureka-server:1.0.0"
    hostname: "eureka-server"
    container_name: "eureka-server"
    ports:
      - "8070:8070"
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost:8070/actuator/health/readiness | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "eureka-server"
      OTEL_SERVICE_NAME: "eureka-server"
    extends:
      file: common-config.yml
      service: microservices-eureka-config


  account-service:
    image: "alishoumar/account-service:1.0.0"
    container_name: "account-service"
    depends_on:
      account-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q -O - http://localhost:8080/actuator/health/readiness | grep -q '\"status\":\"UP\"' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "account-service"
      SPRING_DATASOURCE_URL: "jdbc:mysql://account-db:3306/accountsdb"
      OTEL_SERVICE_NAME: "account-service"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  loan-service:
    image: "alishoumar/loan-service:1.0.0"
    container_name: "loan-service"
    depends_on:
      loan-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q -O - http://localhost:8090/actuator/health/readiness | grep -q '\"status\":\"UP\"' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "loan-service"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loan-db:3306/loansdb"
      OTEL_SERVICE_NAME: "loan-service"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  card-service:
    image: "alishoumar/card-service:1.0.0"
    container_name: "card-service"
    depends_on:
      card-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q -O - http://localhost:9000/actuator/health/readiness | grep -q '\"status\":\"UP\"' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "card-service"
      SPRING_DATASOURCE_URL: "jdbc:mysql://card-db:3306/cardsdb"
      OTEL_SERVICE_NAME: "card-service"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  message-service:
    image: "alishoumar/message-service:1.0.0"
    container_name: "message-service"
    depends_on:
      rabbitmq:
        condition: service_healthy
      account-service:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "message-service"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: "guest"
      SPRING_RABBITMQ_PASSWORD: "guest"
    networks:
     - banking

  gateway-server:
    image: "alishoumar/gateway-server:1.0.0"
    container_name: "gateway-server"
    ports:
      - "8072:8072"
    depends_on:
      account-service:
        condition: service_healthy
      card-service:
        condition: service_healthy
      loan-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gateway-server"
      SPRING_DATA_REDIS_HOST: "redis"
      SPRING_REDIS_PORT: 6379
      OTEL_SERVICE_NAME: "gateway-server"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"

    extends:
      file: common-config.yml
      service: microservices-eureka-config

  minio:
    image: minio/minio
    container_name: "minio"
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - banking

  read:
    image: grafana/loki:latest
    container_name: "read-loki"
    command: "-config.file=/etc/loki/config.yaml -target=read -query-scheduler.use-scheduler-ring=false"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      minio:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      banking:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    container_name: "write-loki"
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      minio:
        condition: service_healthy
    networks:
      <<: *loki-dns

  gateway:
    image: nginx:latest
    container_name: "gateway-nginx"
    depends_on:
      read:
        condition: service_healthy
      write:
        condition: service_healthy
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - banking


  backend:
    image: grafana/loki:latest
    container_name: "backend-loki"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
      - ./loki-data:/loki
      - ./loki-config:/etc/loki
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - banking

  alloy:
    image: grafana/alloy:latest
    container_name: "alloy"
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - banking

  prometheus:
    image: prom/prometheus:latest
    container_name: "prometheus"
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:latest
    container_name: "tempo"
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    container_name: "grafana-server"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      gateway:
        condition: service_healthy
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - banking

networks:
  banking:
    driver: "bridge"